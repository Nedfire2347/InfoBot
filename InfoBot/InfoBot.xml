<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfoBot</name>
    </assembly>
    <members>
        <member name="T:InfoBot.Autorun">
            <summary>
            Save class to keep autoruns
            </summary>
        </member>
        <member name="T:InfoBot.Choice">
            <summary>
            Save class to keep choices (reactions availables for polls)
            </summary>
        </member>
        <member name="T:InfoBot.Poll">
            <summary>
            Save class to keep polls
            </summary>
        </member>
        <member name="T:InfoBot.Range">
            <summary>
            unused class for now, maybe i'll use it one day
            </summary>
        </member>
        <member name="T:InfoBot.Save">
            <summary>
            main class stored in data.json
            </summary>
        </member>
        <member name="T:InfoBot.SavedPoll">
            <summary>
            Save class to keep template polls
            </summary>
        </member>
        <member name="T:InfoBot.SavedVote">
            <summary>
            Save class to keep template votes
            </summary>
        </member>
        <member name="T:InfoBot.SpecialMessage">
            <summary>
            Save class to keep messages that are important to retrieve
            </summary>
        </member>
        <member name="T:InfoBot.Vote">
            <summary>
            Save class to keep votes
            </summary>
        </member>
        <member name="T:InfoBot.PollMessage">
            <summary>
            class for current polls
            </summary>
        </member>
        <member name="P:InfoBot.PollMessage.Author">
            <summary>
            ... id of the author
            </summary>
        </member>
        <member name="P:InfoBot.PollMessage.Choices">
            <summary>
            list of available reactions and their description
            </summary>
        </member>
        <member name="P:InfoBot.PollMessage.Message">
            <summary>
            Message of the poll
            </summary>
        </member>
        <member name="T:InfoBot.VoteMessage">
            <summary>
            class for current votes
            </summary>
        </member>
        <member name="P:InfoBot.VoteMessage.Author">
            <summary>
            ...
            </summary>
        </member>
        <member name="P:InfoBot.VoteMessage.Message">
            <summary>
            message of the vote
            </summary>
        </member>
        <member name="P:InfoBot.Program.Random">
            <summary>
            randomizer.
            </summary>
        </member>
        <member name="P:InfoBot.Program.Polls">
            <summary>
            active polls
            </summary>
        </member>
        <member name="P:InfoBot.Program.Votes">
            <summary>
            active votes
            </summary>
        </member>
        <member name="M:InfoBot.Program.InitCommands">
            <summary>
            Here we initiate the commands declaration
            </summary>
        </member>
        <member name="F:InfoBot.Program.DEBUG">
            <summary>
            Used to change some actions, such as targeting a special debug channel for spam, and
            disable the edt check
            </summary>
        </member>
        <member name="F:InfoBot.Program.AllstarCurrLine">
            <summary>
            Current line of the all star song waiting to be written
            </summary>
        </member>
        <member name="F:InfoBot.Program.allstarLines">
            <summary>
            Lyrics of all star
            </summary>
        </member>
        <member name="F:InfoBot.Program.Autoruns">
            <summary>
            List of all autoruns created
            </summary>
        </member>
        <member name="F:InfoBot.Program.Client">
            <summary>
            Global HTTP client for edt purposes atm
            </summary>
        </member>
        <member name="F:InfoBot.Program.DefaultColor">
            <summary>
            The default front color of the local console
            </summary>
        </member>
        <member name="F:InfoBot.Program.DejavuCurrLine">
            <summary>
            Current line of the deja vu song waiting to be written
            </summary>
        </member>
        <member name="F:InfoBot.Program.dejavuLines">
            <summary>
            Lyrics of deja vu
            </summary>
        </member>
        <member name="F:InfoBot.Program.DUTInfoServer">
            <summary>
            The main discord server
            </summary>
        </member>
        <member name="F:InfoBot.Program.EdtChannel">
            <summary>
            list of 8 edt channels, sorted by their group
            </summary>
        </member>
        <member name="F:InfoBot.Program.LastEdtCheck">
            <summary>
            Last time the edt got checked (used for updating every week)
            </summary>
        </member>
        <member name="F:InfoBot.Program.OldICalHash">
            <summary>
            The old hash of each edt (sorted by their group). Used to detect changes in differents edt.
            </summary>
        </member>
        <member name="F:InfoBot.Program.RevengeCurrLine">
            <summary>
            Current line of the revenge song waiting to be written
            </summary>
        </member>
        <member name="F:InfoBot.Program.revengeLines">
            <summary>
            Lyrics of revenge
            </summary>
        </member>
        <member name="F:InfoBot.Program.SavedPolls">
            <summary>
            active saved polls (using template)
            </summary>
        </member>
        <member name="F:InfoBot.Program.SavedVotes">
            <summary>
            active saved votes (using template)
            </summary>
        </member>
        <member name="F:InfoBot.Program.ShiFuMiChannel">
            <summary>
            The channels of the 2 shi fu mi players
            </summary>
        </member>
        <member name="F:InfoBot.Program.TestServer">
            <summary>
            Id of the test server (NOT the DUT INFO)
            </summary>
        </member>
        <member name="F:InfoBot.Program.TPRoles">
            <summary>
            The 8 roles sorted by their group
            </summary>
        </member>
        <member name="P:InfoBot.Program.CalendarUrl">
            <summary>
            List of urls to the ical sorted by their group
            </summary>
        </member>
        <member name="P:InfoBot.Program.Discord">
            <summary>
            Global discord client
            </summary>
        </member>
        <member name="P:InfoBot.Program.Dispatcher">
            <summary>
            Dispatcher used by the main func
            </summary>
        </member>
        <member name="M:InfoBot.Program.AsyncMain(System.String[])">
            <summary>
            Main func, but async
            </summary>
            <param name="args">arguments</param>
            <returns>void</returns>
        </member>
        <member name="M:InfoBot.Program.CalculateSimilarity(System.String,System.String)">
            <summary>
            Function that return a value between 0 and 1 according to the similarity of 2 strings
            </summary>
            <param name="source">string 1</param>
            <param name="target">string 2</param>
            <returns>value between 0 and 1 according to the similarity of 2 strings</returns>
        </member>
        <member name="M:InfoBot.Program.ComputeLevenshteinDistance(System.String,System.String)">
            <summary>
            Function that returns the number of steps required to transform a string into another
            </summary>
            <param name="source">string 1</param>
            <param name="target">string 2</param>
            <returns>the number of steps required to transform a string into another</returns>
        </member>
        <member name="M:InfoBot.Program.ConsoleManager">
            <summary>
            Manages the local console, currently poorly implemented.
            </summary>
        </member>
        <member name="M:InfoBot.Program.EvaluateWholeStringSimilarity(System.String,System.String)">
            <summary>
            ALl in one function to give a value from 0 to 1 depending of the similarity of 2 strings.
            It first simplifies them and check if the content contains a possible origin string. That
            means it can return a value of 1 if the content contains the origin even if it has more
            chars around.
            </summary>
            <param name="content">String that contains eventually the origin</param>
            <param name="origin">String to search for</param>
            <returns>value from 0 to 1</returns>
        </member>
        <member name="M:InfoBot.Program.ExecuteAsyncMethod(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Safe from crashes way to trun an async method
            </summary>
            <param name="func">async func to run</param>
            <returns>True if everything went well, false if it returned an exception.</returns>
        </member>
        <member name="M:InfoBot.Program.ExecuteAsyncMethod``1(System.Func{System.Threading.Tasks.Task{``0}},``0@)">
            <summary>
            Safe from crashes way to trun an async method
            </summary>
            <param name="func">async func to run</param>
            <param name="returnValue">Possible return value of the async func</param>
            <returns>True if everything went well, false if it returned an exception.</returns>
        </member>
        <member name="M:InfoBot.Program.GetCode(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Get the string implementation of an emoji, regardless of its origin
            </summary>
            <param name="emoji">emoji object</param>
            <returns>coded string</returns>
        </member>
        <member name="M:InfoBot.Program.GetEmoji(System.String)">
            <summary>
            Get the emoji object from a code string
            </summary>
            <param name="code">coded string</param>
            <returns>emoji object</returns>
        </member>
        <member name="M:InfoBot.Program.GetSimplifiedString(System.String)">
            <summary>
            Simplify to the extreme a string, keeping only lowercase with no diacritics letters and digits
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:InfoBot.Program.LoadData">
            <summary>
            Loads the saved data.json file
            </summary>
        </member>
        <member name="M:InfoBot.Program.Main(System.String[])">
            <summary>
            Main func
            </summary>
            <param name="args">arguments</param>
        </member>
        <member name="M:InfoBot.Program.ParseInput(System.String,System.String@,System.String[]@)">
            <summary>
            Parse a command-like string
            </summary>
            <param name="input">command-like string</param>
            <param name="command">name of the command (first word)</param>
            <param name="args">arguments to that command (every other words/strings after the command)</param>
        </member>
        <member name="M:InfoBot.Program.RemoveDiacritics(System.String)">
            <summary>
            remplace every diacritic by its base equivalent (a diacritic is for example "é, ç, â",
            resulting in "e, c, a"
            </summary>
            <param name="text">text to change</param>
            <returns>text without diacritics</returns>
        </member>
        <member name="M:InfoBot.Program.SaveData">
            <summary>
            Here we save all the current data to keep it for the next session
            </summary>
        </member>
        <member name="M:InfoBot.Program.UpdateCalendars">
            <summary>
            Here we check for the edt changes
            </summary>
        </member>
        <member name="M:InfoBot.Program.UpdateLists">
            <summary>
            Here we update the votes/polls
            </summary>
            <returns>void</returns>
        </member>
        <member name="T:InfoBot.Dispatcher">
            <summary>
            The dispatcher is used to sync functions called in different threads to be executed in the
            same thread
            </summary>
        </member>
        <member name="P:InfoBot.Dispatcher.Queue">
            <summary>
            Queue of all the funcs to execute
            </summary>
        </member>
        <member name="M:InfoBot.Dispatcher.Execute(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Execute on the main loop the command.
            </summary>
            <param name="action">Command to execute</param>
        </member>
        <member name="M:InfoBot.Dispatcher.GetNext">
            <summary>
            We extract the earliest function to execute
            </summary>
            <returns>function to execute</returns>
        </member>
        <member name="T:LogicTable.Constant">
            <summary>
            Manages a constant value in the expression (any variable acutally)
            </summary>
        </member>
        <member name="P:LogicTable.Constant.Name">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="M:LogicTable.Constant.Test(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            See in Equation
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:LogicTable.Equation.Test(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Returns the output of the equation.
            </summary>
            <param name="keys">The values to give to the constants</param>
            <returns>Output value of the equation.</returns>
        </member>
        <member name="T:LogicTable.Not">
            <summary>
            The... not operator....
            </summary>
        </member>
        <member name="P:LogicTable.Not.InternalEquation">
            <summary>
            Sub equation to apply the not operator
            </summary>
        </member>
        <member name="M:LogicTable.Not.Test(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            See in Equation
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:LogicTable.OperatorEquation" -->
        <member name="T:LogicTable.OperatorEquation.OperatorType">
            <summary>
            Id of the operator
            </summary>
        </member>
        <member name="P:LogicTable.OperatorEquation.Left">
            <summary>
            Left part of the operator
            </summary>
        </member>
        <member name="P:LogicTable.OperatorEquation.Operator">
            <summary>
            Type of operator to apply
            </summary>
        </member>
        <member name="P:LogicTable.OperatorEquation.Right">
            <summary>
            Right part of operator
            </summary>
        </member>
        <member name="M:LogicTable.Parsing.DivideStr(System.String,System.Int32@)">
            <summary>
            This method split the equation (string) into a tree of equations (string) according the parentheses
            </summary>
            <param name="eq">equation</param>
            <param name="index">starting index of the equation in the string</param>
            <returns>tree</returns>
        </member>
        <member name="M:LogicTable.Parsing.GenerateHTML(System.String)">
            <summary>
            Generates html code containing the logic table of the equation
            </summary>
            <param name="eq">equation</param>
            <returns>html</returns>
        </member>
        <member name="M:LogicTable.Parsing.getStr(LogicTable.Equation)">
            <summary>
            returns a visual variant of an equation
            </summary>
            <param name="eq"></param>
            <returns></returns>
        </member>
        <member name="M:LogicTable.Parsing.Parse(System.String,LogicTable.UnparsedEq,System.Collections.Generic.List{System.String})">
            <summary>
            Returns an equation from the given string, and other stuff
            </summary>
            <param name="str">equation to parse</param>
            <param name="currentUnparsed">current tree</param>
            <param name="registeredVars">the variables</param>
            <returns>output equation</returns>
        </member>
        <member name="M:LogicTable.Parsing.SkipBlank(System.String,System.Int32@)">
            <summary>
            Increase the index while it has blank chars in the way
            </summary>
            <param name="str"></param>
            <param name="index"></param>
        </member>
        <member name="T:LogicTable.UnparsedEq">
            <summary>
            Represent a string tree, according to parentheses
            </summary>
        </member>
        <member name="F:LogicTable.UnparsedEq.str">
            <summary>
            string of the equation (sub tree are written like this : "%####") to be linked with the subEqs
            </summary>
        </member>
        <member name="F:LogicTable.UnparsedEq.subEqs">
            <summary>
            sub trees
            </summary>
        </member>
    </members>
</doc>
